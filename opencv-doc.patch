Index: doc/patch_qthelp.py
===================================================================
--- doc/patch_qthelp.py	(revision 0)
+++ doc/patch_qthelp.py	(working copy)
@@ -0,0 +1,94 @@
+#!/usr/bin/python
+
+import re
+import os
+import os.path
+
+def fix_qhp(cwd):
+    keyword  = re.compile('^(\s*)\<keyword name="(.*\(C\+\+.+\))" ref="\(u\'(.+)\', u\'(.+)\'\)"\/>\s*$')
+    refclean = re.compile('[^0-9a-zA-Z._\-#/\\\\~\[\]\=]')
+    refrepl = '_'
+    files = {} # files to fix
+
+    def repl(m):
+        indent, name, id, ref = m.groups()
+
+        if '#' in ref:
+            filename, refhash = ref.split('#', 1)
+
+            refhash = refhash.replace('&', '&amp;')
+            cleanhash = refclean.sub('_', refhash)
+            ref = '#'.join([filename, cleanhash])
+
+            if filename in files:
+                files[filename] |= {(refhash, cleanhash)}
+            else:
+                files[filename] = {(refhash, cleanhash)}
+
+        id = id.replace('<', '&lt;')
+        id = id.replace('>', '&gt;')
+
+        ret = '{0}<keyword name="{1}" id="cv::{2}" ref="{3}"/>\n'.format(indent, name, id, ref)
+        ret += '{0}<keyword name="{1}" id="{2}" ref="{3}"/>\n'.format(indent, name, id, ref)
+        return ret
+
+    ret = ''
+    qhp_path = os.path.join(cwd, 'OpenCV.qhp')
+    with open(qhp_path, 'r') as f:
+        for line in f:
+            if '<keyword ' in line:
+                line, n = keyword.subn(repl, line)
+                if not n:
+                    continue
+
+            ret += line
+
+    with open(qhp_path, 'w') as f:
+        f.write(ret)
+
+    for fn, fixset in files.items():
+        fn = os.path.join(cwd, fn)
+        tfn = fn + '.tmp'
+
+        with open(fn, 'r') as f:
+            with open(tfn, 'w') as out:
+                data = f.read()
+                for refhash, cleanhash in fixset:
+                    data = data.replace(refhash, cleanhash)
+                out.write(data)
+
+        os.rename(tfn, fn)
+
+
+
+def merge_css(src, dst, skip):
+    if not os.path.exists(src):
+        return
+
+    with open(src, 'a') as fsrc:
+        with open(dst, 'r') as fdst:
+            # skip header and @import url('basic.css');
+            for x in range(skip):
+                fdst.readline()
+
+            fsrc.write('\n')
+            fsrc.write(fdst.read())
+
+    os.rename(src, dst)
+
+
+if __name__ == '__main__':
+    import argparse
+    parser = argparse.ArgumentParser()
+    parser.add_argument('targets',
+            metavar = 'path',
+            nargs = 1,
+            help = 'path to generated qthelp docs')
+
+    options = parser.parse_args()
+    target = options.targets[0]
+    docsdir = os.path.abspath(target)
+    if os.path.exists(docsdir):
+        bcss, dcss = [os.path.join(docsdir, '_static', f) for f in ['basic.css', 'default.css']]
+        merge_css(bcss, dcss, skip=6)
+        fix_qhp(docsdir)
Index: doc/CMakeLists.txt
===================================================================
--- doc/CMakeLists.txt	(revision 6876)
+++ doc/CMakeLists.txt	(working copy)
@@ -52,6 +52,18 @@
                 WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                 COMMENT "Generating Online Documentation")
 
+add_custom_target(qthelp_docs
+                ${SPHINX_BUILD}
+                  -b qthelp -c ${CMAKE_CURRENT_SOURCE_DIR}
+                  ${CMAKE_CURRENT_SOURCE_DIR}/.. ./_qthelp
+                COMMAND ${PYTHON_EXECUTABLE} "${CMAKE_CURRENT_SOURCE_DIR}/patch_qthelp.py" ./_qthelp
+                COMMAND ${CMAKE_COMMAND} -E copy
+                  ${CMAKE_CURRENT_SOURCE_DIR}/mymath.sty ${CMAKE_CURRENT_BINARY_DIR}
+                DEPENDS ${OPENCV_DOC_DEPS}
+                WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+                COMMENT "Generating Qt Help Documentation"
+                )
+
 endif()
         
 install(FILES ${FILES_DOC} DESTINATION "${OPENCV_DOC_INSTALL_PATH}" COMPONENT main)
Index: doc/_themes/blue/layout.html
===================================================================
--- doc/_themes/blue/layout.html	(revision 6876)
+++ doc/_themes/blue/layout.html	(working copy)
@@ -10,23 +10,6 @@
           <div class="body">
             {% block body %} {% endblock %}
           </div>
-          <div class="feedback">
-              <h2>Help and Feedback</h2>
-              You did not find what you were looking for?
-              <ul>
-                  {% if theme_lang == 'c' %}
-                  {% endif %}
-                  {% if theme_lang == 'cpp' %}
-                    <li>Try the <a href="http://opencv.willowgarage.com/wiki/Welcome?action=AttachFile&do=get&target=opencv_cheatsheet.pdf">Cheatsheet</a>.</li>
-                  {% endif %}
-                  {% if theme_lang == 'py' %}
-                    <li>Try the <a href="cookbook.html">Cookbook</a>.</li>
-                  {% endif %}
-                  <li>Ask a question in the <a href="http://tech.groups.yahoo.com/group/OpenCV/">user group/mailing list</a>.</li>
-                  <li>If you think something is missing or wrong in the documentation,
-                  please file a <a href="https://code.ros.org/trac/opencv/wiki">bug report</a>.</li>
-              </ul>
-          </div>
       {%- if not embedded %}{% if not theme_nosidebar|tobool %}
         </div>
       {%- endif %}{% endif %}
Index: doc/_themes/blue/theme.conf
===================================================================
--- doc/_themes/blue/theme.conf	(revision 6876)
+++ doc/_themes/blue/theme.conf	(working copy)
@@ -4,6 +4,8 @@
 pygments_style = sphinx
 
 [options]
+embedded = true
+nosidebar = true
 rightsidebar = false
 stickysidebar = false
 footerbgcolor    = #004068
@@ -25,7 +27,7 @@
 feedbackbgcolor  = #004068
 feedbacktextcolor = #ffffff
 feedbacklinkcolor = #ffffff
-bodyfont = sans-serif
-headfont = 'Trebuchet MS', sans-serif
-guifont = "Lucida Sans","Lucida Sans Unicode","Lucida Grande",Verdana,Arial,Helvetica,sans-serif
-lang = none
\ No newline at end of file
+bodyfont = "Liberation Sans", "Verdana", sans-serif
+headfont = "Liberation Sans", "Verdana", 'Trebuchet MS', sans-serif
+guifont = "Liberation Sans", "Verdana", "Lucida Sans","Lucida Sans Unicode","Lucida Grande",,Arial,Helvetica,sans-serif
+lang = none
